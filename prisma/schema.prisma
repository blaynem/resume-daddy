generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public", "auth"]
}

model user {
  // This user id is from the auth schema, not the public schema.
  user       users  @relation(fields: [id], references: [id])
  id         String @id @db.Uuid
  email      String
  first_name String
  last_name  String

  // ## Define Relations ##
  interests         interests[]
  jobs              jobs[]
  skills            skills[]
  resumePredictions resumePredictions[]
  audit_logs        audit_log[]
  suggestedChanges  suggestedChanges[]

  @@schema("public")
}

model audit_log {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  table_name String
  row_id     String
  old_data   Json?
  new_data   Json?
  timestamp  DateTime? @default(now())
  user       user?     @relation(fields: [user_id], references: [id])
  user_id    String?   @db.Uuid

  @@schema("public")
}

model suggestedChanges {
  id                String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user              user?          @relation(fields: [user_id], references: [id])
  user_id           String?        @db.Uuid
  // Where the suggestion came from, is it an experience or a job summary?
  type              SuggestionType
  job_id            String?
  original_content  String
  suggested_content String
  suggest_at        DateTime?      @default(now())
  // If the user has accepted or rejected the suggestion
  status            StatusType     @default(PENDING)
  // reason why the user rejected the suggestion, if they did.
  status_reason     String?

  @@schema("public")
}

enum StatusType {
  PENDING
  ACCEPTED
  REJECTED

  @@schema("public")
}

enum SuggestionType {
  EXPERIENCE
  JOB_SUMMARY

  @@schema("public")
}

model resumePredictions {
  id         String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user       user?   @relation(fields: [user_id], references: [id])
  user_id    String? @db.Uuid
  // Prompt is what we sent to the AI to predict.
  prompt     String
  // Prediction is what the AI returned in response.
  prediction String

  @@schema("public")
}

// TODO: Add more tags to break these down further in the future.
model jobs {
  id                     String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user                   user?     @relation(fields: [user_id], references: [id])
  user_id                String?   @db.Uuid
  // What users literal job title is
  title                  String
  summary                String
  interpreted_summary    String?
  // Order of job history, higher number means more recent.
  user_job_order         Int
  // Optional company name
  company_name           String?
  date_started           DateTime?
  date_ended             DateTime?
  achievements           String?
  experience             String?
  interpreted_experience String?
  // What the job title might also be known as. IE: Software Engineer, Software Developer, etc.
  // This is beneficial so that if the users job title is not the same as the industry standard,
  // they can still be found.
  industry_titles        String[]
  industry_tags          String?
  // Type of job, full time, part time, contract, etc.
  type                   String?

  // Temporary field while we figure out how to parse it
  temp_skills String

  // ## Define Relations ##
  skills_used skills[]

  @@unique([user_id, user_job_order])
  @@schema("public")
}

// TODO: Add more tags to break these down further in the future.
model skills {
  id             String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user           user?    @relation(fields: [user_id], references: [id])
  user_id        String?  @db.Uuid
  // Literal content of what user types
  content        String
  // What we interpreted they meant based on AI feedback
  interpretation String?
  // What industries this skill might be related to
  industry_tags  String[]

  // ## Define Relations ##
  related_jobs jobs[]

  @@schema("public")
}

model interests {
  id            String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user          user?    @relation(fields: [user_id], references: [id])
  user_id       String?  @db.Uuid
  content       String?
  // What industries this Interest might be related to
  industry_tags String[]

  @@schema("public")
}

// This table is used to store the raw resume data that we get from the user
// This is only temporary so that we can get the user through sign up flow easier.
// -- As all things "temporary", this will probably be here for a while. 5/24/2023
model signup {
  id             String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  data           Json      @db.Json
  created_at     DateTime? @default(now())
  completed      Boolean?  @default(false)
  date_completed DateTime?

  @@schema("public")
}

// ############################## Auth Models (Supplied from Supabase no touchy!) ##############################
model audit_log_entries {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?     @db.Json
  created_at  DateTime? @db.Timestamptz(6)
  ip_address  String    @default("") @db.VarChar(64)

  @@index([instance_id], map: "audit_logs_instance_id_idx")
  @@schema("auth")
}

model flow_state {
  id                     String                @id @db.Uuid
  user_id                String?               @db.Uuid
  auth_code              String
  code_challenge_method  code_challenge_method
  code_challenge         String
  provider_type          String
  provider_access_token  String?
  provider_refresh_token String?
  created_at             DateTime?             @db.Timestamptz(6)
  updated_at             DateTime?             @db.Timestamptz(6)
  authentication_method  String

  @@index([auth_code], map: "idx_auth_code")
  @@index([user_id, authentication_method], map: "idx_user_id_auth_method")
  @@schema("auth")
}

model identities {
  id              String
  user_id         String    @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime? @db.Timestamptz(6)
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)
  email           String?   @default(dbgenerated("lower((identity_data ->> 'email'::text))"))
  users           users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([provider, id])
  @@index([email])
  @@index([user_id])
  @@schema("auth")
}

model instances {
  id              String    @id @db.Uuid
  uuid            String?   @db.Uuid
  raw_base_config String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@schema("auth")
}

model mfa_amr_claims {
  session_id            String   @db.Uuid
  created_at            DateTime @db.Timestamptz(6)
  updated_at            DateTime @db.Timestamptz(6)
  authentication_method String
  id                    String   @id(map: "amr_id_pk") @db.Uuid
  sessions              sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([session_id, authentication_method], map: "mfa_amr_claims_session_id_authentication_method_pkey")
  @@schema("auth")
}

model mfa_challenges {
  id          String      @id @db.Uuid
  factor_id   String      @db.Uuid
  created_at  DateTime    @db.Timestamptz(6)
  verified_at DateTime?   @db.Timestamptz(6)
  ip_address  String      @db.Inet
  mfa_factors mfa_factors @relation(fields: [factor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mfa_challenges_auth_factor_id_fkey")

  @@schema("auth")
}

model mfa_factors {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  friendly_name  String?
  factor_type    factor_type
  status         factor_status
  created_at     DateTime         @db.Timestamptz(6)
  updated_at     DateTime         @db.Timestamptz(6)
  secret         String?
  mfa_challenges mfa_challenges[]
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id, created_at], map: "factor_id_created_at_idx")
  @@schema("auth")
}

model refresh_tokens {
  instance_id String?   @db.Uuid
  id          BigInt    @id @default(autoincrement())
  token       String?   @unique(map: "refresh_tokens_token_unique") @db.VarChar(255)
  user_id     String?   @db.VarChar(255)
  revoked     Boolean?
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  parent      String?   @db.VarChar(255)
  session_id  String?   @db.Uuid
  sessions    sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([instance_id])
  @@index([instance_id, user_id])
  @@index([parent])
  @@index([session_id, revoked])
  @@schema("auth")
}

model saml_providers {
  id                String        @id @db.Uuid
  sso_provider_id   String        @db.Uuid
  entity_id         String        @unique
  metadata_xml      String
  metadata_url      String?
  attribute_mapping Json?
  created_at        DateTime?     @db.Timestamptz(6)
  updated_at        DateTime?     @db.Timestamptz(6)
  sso_providers     sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

model saml_relay_states {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  from_ip_address String?       @db.Inet
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([for_email])
  @@index([sso_provider_id])
  @@schema("auth")
}

model schema_migrations {
  version String @id @db.VarChar(255)

  @@schema("auth")
}

model sessions {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  created_at     DateTime?        @db.Timestamptz(6)
  updated_at     DateTime?        @db.Timestamptz(6)
  factor_id      String?          @db.Uuid
  aal            aal_level?
  not_after      DateTime?        @db.Timestamptz(6)
  mfa_amr_claims mfa_amr_claims[]
  refresh_tokens refresh_tokens[]
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id])
  @@index([user_id, created_at], map: "user_id_created_at_idx")
  @@schema("auth")
}

model sso_domains {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  domain          String
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

model sso_providers {
  id                String              @id @db.Uuid
  resource_id       String?
  created_at        DateTime?           @db.Timestamptz(6)
  updated_at        DateTime?           @db.Timestamptz(6)
  saml_providers    saml_providers[]
  saml_relay_states saml_relay_states[]
  sso_domains       sso_domains[]

  @@schema("auth")
}

model users {
  instance_id                 String?       @db.Uuid
  id                          String        @id @db.Uuid
  aud                         String?       @db.VarChar(255)
  role                        String?       @db.VarChar(255)
  email                       String?       @db.VarChar(255)
  encrypted_password          String?       @db.VarChar(255)
  email_confirmed_at          DateTime?     @db.Timestamptz(6)
  invited_at                  DateTime?     @db.Timestamptz(6)
  confirmation_token          String?       @db.VarChar(255)
  confirmation_sent_at        DateTime?     @db.Timestamptz(6)
  recovery_token              String?       @db.VarChar(255)
  recovery_sent_at            DateTime?     @db.Timestamptz(6)
  email_change_token_new      String?       @db.VarChar(255)
  email_change                String?       @db.VarChar(255)
  email_change_sent_at        DateTime?     @db.Timestamptz(6)
  last_sign_in_at             DateTime?     @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime?     @db.Timestamptz(6)
  updated_at                  DateTime?     @db.Timestamptz(6)
  phone                       String?       @unique
  phone_confirmed_at          DateTime?     @db.Timestamptz(6)
  phone_change                String?       @default("")
  phone_change_token          String?       @default("") @db.VarChar(255)
  phone_change_sent_at        DateTime?     @db.Timestamptz(6)
  confirmed_at                DateTime?     @default(dbgenerated("LEAST(email_confirmed_at, phone_confirmed_at)")) @db.Timestamptz(6)
  email_change_token_current  String?       @default("") @db.VarChar(255)
  email_change_confirm_status Int?          @default(0) @db.SmallInt
  banned_until                DateTime?     @db.Timestamptz(6)
  reauthentication_token      String?       @default("") @db.VarChar(255)
  reauthentication_sent_at    DateTime?     @db.Timestamptz(6)
  is_sso_user                 Boolean       @default(false)
  deleted_at                  DateTime?     @db.Timestamptz(6)
  identities                  identities[]
  mfa_factors                 mfa_factors[]
  sessions                    sessions[]

  // This is for the public user profile
  user user?

  @@index([instance_id])
  @@schema("auth")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum code_challenge_method {
  s256
  plain

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn

  @@schema("auth")
}
