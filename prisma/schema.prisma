generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model user {
  /// This user id is from the auth schema, not the public schema.
  id               String             @id @db.Uuid
  email            String
  first_name       String
  last_name        String
  audit_logs       audit_log[]
  interests        interests[]
  jobs             jobs[]
  predictions      predictions[]
  skills           skills[]
  suggestedChanges suggestedChanges[]
}

model audit_log {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  table_name String
  row_id     String
  old_data   Json?
  new_data   Json?
  timestamp  DateTime? @default(now())
  user_id    String?   @db.Uuid
  user       user?     @relation(fields: [user_id], references: [id])
}

model suggestedChanges {
  id                String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id           String?        @db.Uuid
  /// Where the suggestion came from, is it an experience or a job summary?
  type              SuggestionType
  job_id            String?
  original_content  String
  suggested_content String
  suggest_at        DateTime?      @default(now())
  /// If the user has accepted or rejected the suggestion
  status            StatusType     @default(PENDING)
  /// reason why the user rejected the suggestion, if they did.
  status_reason     String?
  user              user?          @relation(fields: [user_id], references: [id])
}

/// Table to store prediction information
model predictions {
  id              String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id         String?        @db.Uuid
  /// Job description that we are making a prediction for
  job_description String
  /// What the current state of the users resume is
  resume          String
  /// Free form text that the user can enter to help the AI
  question        String
  /// Prediction is what the AI returned in response.
  prediction      String
  created_at      DateTime?      @default(now())
  type            PredictionType
  user            user?          @relation(fields: [user_id], references: [id])
}

/// TODO: Add more tags to break these down further in the future.
model jobs {
  id                     String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id                String?   @db.Uuid
  /// What users literal job title is
  title                  String
  summary                String
  interpreted_summary    String?
  /// Order of job history, higher number means more recent.
  user_job_order         Int
  /// Optional company name
  company_name           String?
  date_started           DateTime?
  date_ended             DateTime?
  achievements           String?
  experience             String?
  interpreted_experience String?
  /// What the job title might also be known as. IE: Software Engineer, Software Developer, etc.
  /// This is beneficial so that if the users job title is not the same as the industry standard,
  /// they can still be found.
  industry_titles        String[]
  industry_tags          String?
  /// Type of job, full time, part time, contract, etc.
  type                   String?
  /// Temporary field while we figure out how to parse it
  temp_skills            String
  user                   user?     @relation(fields: [user_id], references: [id])
  skills_used            skills[]  @relation("jobsToskills")

  @@unique([user_id, user_job_order])
}

/// TODO: Add more tags to break these down further in the future.
model skills {
  id             String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id        String?  @db.Uuid
  /// Literal content of what user types
  content        String
  /// What we interpreted they meant based on AI feedback
  interpretation String?
  /// What industries this skill might be related to
  industry_tags  String[]
  user           user?    @relation(fields: [user_id], references: [id])
  related_jobs   jobs[]   @relation("jobsToskills")
}

model interests {
  id            String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String?  @db.Uuid
  content       String?
  /// What industries this Interest might be related to
  industry_tags String[]
  user          user?    @relation(fields: [user_id], references: [id])
}

enum StatusType {
  PENDING
  ACCEPTED
  REJECTED
}

enum SuggestionType {
  EXPERIENCE
  JOB_SUMMARY
  COVER_LETTER
}

enum PredictionType {
  FREE_FORM_QUESTION
}
